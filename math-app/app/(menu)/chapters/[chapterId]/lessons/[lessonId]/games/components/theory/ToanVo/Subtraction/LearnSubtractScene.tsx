import { router } from "expo-router";
import React, { useEffect, useState, useRef } from "react";
import {
  View,
  Text,
  StyleSheet,
  Image,
  Dimensions,
  TouchableOpacity,
  ActivityIndicator,
  StatusBar,
  SafeAreaView,
  ImageBackground,
  Animated as RNAnimated,
  Easing,
} from "react-native";
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  withRepeat,
  withSequence,
  runOnJS,
} from "react-native-reanimated";
import { LinearGradient } from "expo-linear-gradient";
import { FontAwesome5 } from "@expo/vector-icons";
import { Shadow } from "react-native-shadow-2";
import { useSpeech } from "../../useSpeechHook";

const { width, height } = Dimensions.get("window");

// üì¶ H√¨nh ·∫£nh d√πng require
const CAKE_IMAGE = require("../../../../../../../../../../../assets/images/ToanVo/images/Cake1.png");
const ANT_IMAGE = require("../../../../../../../../../../../assets/images/ToanVo/images/ant.png");
const OWL_TEACHER_IMAGE = require("../../../../../../../../../../../assets/images/ToanVo/images/owl.png");
const OWL_CRY_IMAGE = require("../../../../../../../../../../../assets/images/ToanVo/images/owl_cry.png");
const backgroundImg = require("../../../../../../../../../../../assets/images/ToanVo/images/bg.jpg");

// T·∫°o components animated
const AnimatedView = Animated.createAnimatedComponent(View);
const AnimatedText = Animated.createAnimatedComponent(Text);

interface LearnSubtractSceneProps {
  chapterId: string;
  lessonId: string;
  gameId: string;
  gameData: {
    id: number;
    title: string;
    type: string;
    difficulty: string;
    description: string;
  };
}
export default function LearnSubtractScene({
  chapterId,
  lessonId,
  gameId,
  gameData,
}: LearnSubtractSceneProps) {
  const [visibleCakes, setVisibleCakes] = useState(0);
  const [showText1, setShowText1] = useState(false);
  const [showText2, setShowText2] = useState(false);
  const [showText3, setShowText3] = useState(false);
  const [showResult, setShowResult] = useState(false);
  const [screenKey, setScreenKey] = useState(0);
  const [imagesLoaded, setImagesLoaded] = useState(false);

  // Animated values cho n·ªôi dung (Reanimated)
  const antX = useSharedValue(width);
  const opacity1 = useSharedValue(0);
  const opacity2 = useSharedValue(0);
  const opacity3 = useSharedValue(0);
  const opacityResult = useSharedValue(0);
  const owlRotation = useSharedValue(0);

  // UI animation values (React Native Animated)
  const titleOpacity = useRef(new RNAnimated.Value(0)).current;
  const contentOpacity = useRef(new RNAnimated.Value(0)).current;
  const backButtonScale = useRef(new RNAnimated.Value(1)).current;
  const reloadButtonScale = useRef(new RNAnimated.Value(1)).current;
  const nextButtonScale = useRef(new RNAnimated.Value(1)).current;
  const characterAnim = useRef(new RNAnimated.Value(0)).current;
  const equationScale = useRef(new RNAnimated.Value(0.9)).current;

  // Th√™m animation refs cho hi·ªáu ·ª©ng l·∫Øc l∆∞ n√¢ng cao
  const owlSwayX = useRef(new RNAnimated.Value(0)).current;
  const owlRotate = useRef(new RNAnimated.Value(0)).current;
  const owlBounceY = useRef(new RNAnimated.Value(0)).current;
  const owlScaleX = useRef(new RNAnimated.Value(1)).current;
  const owlScaleY = useRef(new RNAnimated.Value(1)).current;

  // C·∫•u h√¨nh gi·ªçng n√≥i
  const speechOptions = {
    language: "vi-VN",
    pitch: 1.1,
    rate: 0.75, // Gi·∫£m t·ªëc ƒë·ªô t·ª´ 0.9 xu·ªëng 0.75 ƒë·ªÉ tr·∫ª hi·ªÉu r√µ h∆°n
    volume: 1.0,
  };

  const owlStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${owlRotation.value}deg` }],
  }));

  const antStyle = useAnimatedStyle(() => ({
    transform: [{ translateX: antX.value }],
    position: "absolute",
    top: height * 0.2,
  }));

  const textStyle1 = useAnimatedStyle(() => ({ opacity: opacity1.value }));
  const textStyle2 = useAnimatedStyle(() => ({ opacity: opacity2.value }));
  const textStyle3 = useAnimatedStyle(() => ({ opacity: opacity3.value }));
  const resultStyle = useAnimatedStyle(() => ({
    opacity: opacityResult.value,
  }));

  // üîÑ H√†m preload ·∫£nh
  const preloadImages = async () => {
    const images = [
      CAKE_IMAGE,
      ANT_IMAGE,
      OWL_TEACHER_IMAGE,
      OWL_CRY_IMAGE,
      backgroundImg,
    ];
    try {
      await Promise.all(
        images.map((img) => {
          Image.resolveAssetSource(img);
          return Promise.resolve();
        })
      );
      setImagesLoaded(true);
    } catch (error) {
      console.error("L·ªói khi t·∫£i h√¨nh ·∫£nh:", error);
      setImagesLoaded(true);
    }
  };

  // H√†m ƒë·ªçc vƒÉn b·∫£n
  // const speak = async (text: string, options = {}) => {
  //   if (speaking) {
  //     await stopSpeech(); // D·ª´ng gi·ªçng n√≥i hi·ªán t·∫°i tr∆∞·ªõc khi ph√°t gi·ªçng n√≥i m·ªõi
  //   }

  //   setSpeaking(true);

  //   try {
  //     await Speech.speak(text, {
  //       ...speechOptions,
  //       ...options,
  //       onDone: () => setSpeaking(false),
  //       onError: () => setSpeaking(false),
  //     });
  //   } catch (error) {
  //     console.error("Speech error:", error);
  //     setSpeaking(false);
  //   }
  // };

  // // H√†m d·ª´ng gi·ªçng n√≥i
  // const stopSpeech = async () => {
  //   try {
  //     await Speech.stop();
  //     setSpeaking(false);
  //   } catch (error) {
  //     console.warn("Error stopping speech:", error);
  //   }
  // };
  const { speak, stopSpeech, isSpeechActive, pageId } = useSpeech({
    pageId: `LearnSubtractScene-${chapterId}-${lessonId}-${gameId}`,
    autoCleanupOnUnmount: true,
    autoStopOnBlur: true,
  });

  // T·∫°o hi·ªáu ·ª©ng l·∫Øc l∆∞ t·ª± nhi√™n cho ch√∫ c√∫
  const startOwlWobble = () => {
    // T·∫°o random factor ƒë·ªÉ m·ªói l·∫ßn animation kh√°c nhau m·ªôt ch√∫t
    const randomFactor = Math.random() * 0.3 + 0.85;

    // Animation ph·ª©c h·ª£p ƒë·ªÉ ch√∫ c√∫ l·∫Øc l∆∞ t·ª± nhi√™n h∆°n
    const createWobbleAnimation = () => {
      // Reset gi√° tr·ªã
      owlBounceY.setValue(0);

      // T·∫°o chu·ªói animation ng·∫´u nhi√™n
      const animations = [
        // L·∫Øc qua ph·∫£i + nghi√™ng + co gi√£n nh·∫π
        RNAnimated.parallel([
          RNAnimated.timing(owlSwayX, {
            toValue: 3 * randomFactor,
            duration: 800 + Math.random() * 200,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlRotate, {
            toValue: 0.03 * randomFactor,
            duration: 800 + Math.random() * 200,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlScaleX, {
            toValue: 1.02,
            duration: 800,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlBounceY, {
            toValue: -2 * randomFactor,
            duration: 800,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
        ]),

        // L·∫Øc qua tr√°i + nghi√™ng ng∆∞·ª£c l·∫°i + co gi√£n nh·∫π kh√°c
        RNAnimated.parallel([
          RNAnimated.timing(owlSwayX, {
            toValue: -3 * randomFactor,
            duration: 800 + Math.random() * 200,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlRotate, {
            toValue: -0.03 * randomFactor,
            duration: 800 + Math.random() * 200,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlScaleX, {
            toValue: 0.98,
            duration: 800,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlBounceY, {
            toValue: 2 * randomFactor,
            duration: 800,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
        ]),

        // Tr·ªü v·ªÅ v·ªã tr√≠ g·ªëc v·ªõi nh·∫π nh√†ng
        RNAnimated.parallel([
          RNAnimated.timing(owlSwayX, {
            toValue: 0,
            duration: 400,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlRotate, {
            toValue: 0,
            duration: 400,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlScaleX, {
            toValue: 1,
            duration: 400,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
          RNAnimated.timing(owlBounceY, {
            toValue: 0,
            duration: 400,
            easing: Easing.inOut(Easing.ease),
            useNativeDriver: true,
          }),
        ]),
      ];

      // K·∫øt h·ª£p c√°c animation v√† l·∫∑p l·∫°i ng·∫´u nhi√™n
      RNAnimated.sequence(animations).start(() => {
        // ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l·∫°i
        setTimeout(() => {
          createWobbleAnimation();
        }, Math.random() * 300 + 100);
      });
    };

    // B·∫Øt ƒë·∫ßu animation
    createWobbleAnimation();
  };

  // H√†m t·∫°o hi·ªáu ·ª©ng l·∫Øc m·∫°nh khi nh·∫•n v√†o ch√∫ c√∫
  const shakeOwl = (message: string) => {
    // Reset v·ªÅ v·ªã tr√≠ g·ªëc tr∆∞·ªõc khi t·∫°o hi·ªáu ·ª©ng m·ªõi
    owlSwayX.setValue(0);
    owlRotate.setValue(0);
    owlBounceY.setValue(0);
    owlScaleX.setValue(1);

    // T·∫°o hi·ªáu ·ª©ng l·∫Øc m·∫°nh
    RNAnimated.sequence([
      // Co l·∫°i nh·∫π
      RNAnimated.parallel([
        RNAnimated.timing(owlScaleX, {
          toValue: 0.95,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlScaleY, {
          toValue: 0.95,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlBounceY, {
          toValue: 3,
          duration: 100,
          useNativeDriver: true,
        }),
      ]),

      // L·∫Øc qua ph·∫£i m·∫°nh
      RNAnimated.parallel([
        RNAnimated.timing(owlSwayX, {
          toValue: 10,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlRotate, {
          toValue: 0.08,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlScaleX, {
          toValue: 1.05,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlScaleY, {
          toValue: 1.05,
          duration: 100,
          useNativeDriver: true,
        }),
      ]),

      // L·∫Øc qua tr√°i m·∫°nh
      RNAnimated.parallel([
        RNAnimated.timing(owlSwayX, {
          toValue: -10,
          duration: 100,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlRotate, {
          toValue: -0.08,
          duration: 100,
          useNativeDriver: true,
        }),
      ]),

      // L·∫Øc qua ph·∫£i v·ª´a
      RNAnimated.parallel([
        RNAnimated.timing(owlSwayX, {
          toValue: 8,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlRotate, {
          toValue: 0.06,
          duration: 80,
          useNativeDriver: true,
        }),
      ]),

      // L·∫Øc qua tr√°i v·ª´a
      RNAnimated.parallel([
        RNAnimated.timing(owlSwayX, {
          toValue: -8,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlRotate, {
          toValue: -0.06,
          duration: 80,
          useNativeDriver: true,
        }),
      ]),

      // Tr·ªü v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
      RNAnimated.parallel([
        RNAnimated.timing(owlSwayX, {
          toValue: 0,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlRotate, {
          toValue: 0,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlScaleX, {
          toValue: 1,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlScaleY, {
          toValue: 1,
          duration: 80,
          useNativeDriver: true,
        }),
        RNAnimated.timing(owlBounceY, {
          toValue: 0,
          duration: 80,
          useNativeDriver: true,
        }),
      ]),
    ]).start(() => {
      // Sau khi l·∫Øc xong, b·∫Øt ƒë·∫ßu ƒë·ªçc
      speak(message);
    });
  };

  // üîÅ Animation flow khi b·∫Øt ƒë·∫ßu h·ªçc
  const startAnimationFlow = () => {
    // Hi·ªáu ·ª©ng UI xu·∫•t hi·ªán gi·ªØ nguy√™n
    RNAnimated.parallel([
      RNAnimated.timing(titleOpacity, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      RNAnimated.timing(contentOpacity, {
        toValue: 1,
        duration: 1000,
        delay: 300,
        useNativeDriver: true,
      }),
      RNAnimated.timing(characterAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      RNAnimated.spring(equationScale, {
        toValue: 1,
        friction: 6,
        tension: 40,
        useNativeDriver: true,
      }),
    ]).start();

    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng l·∫Øc l∆∞ cho ch√∫ c√∫
    startOwlWobble();

    // Logic b√†i h·ªçc (Reanimated)
    setVisibleCakes(6);
    setShowText1(true);
    opacity1.value = withTiming(1, { duration: 1200 }); // TƒÉng t·ª´ 800ms l√™n 1200ms

    // ƒê·ªçc c√¢u ƒë·∫ßu ti√™n - ƒë·ª£i l√¢u h∆°n (t·ª´ 1500ms l√™n 2500ms)
    setTimeout(() => {
      speak("M√¨nh c√≥ 6 chi·∫øc b√°nh ngon l√†nh");
    }, 2500);

    // C√∫ m√®o l·∫Øc ƒë·∫ßu li√™n t·ª•c - gi·∫£m t·∫ßn su·∫•t l·∫Øc
    owlRotation.value = withRepeat(
      withSequence(
        withTiming(-5, { duration: 800 }), // TƒÉng t·ª´ 600ms l√™n 800ms
        withTiming(5, { duration: 800 }) // TƒÉng t·ª´ 600ms l√™n 800ms
      ),
      -1,
      true
    );

    // ƒê·ª£i l√¢u h∆°n tr∆∞·ªõc khi hi·ªÉn th·ªã c√¢u ti·∫øp theo (tƒÉng t·ª´ 3000ms l√™n 5000ms)
    setTimeout(() => {
      setShowText2(true);
      opacity2.value = withTiming(1, { duration: 1200 }); // TƒÉng t·ª´ 800ms l√™n 1200ms

      // ƒê·ªçc c√¢u th·ª© hai - ƒë·ª£i l√¢u h∆°n ƒë·ªÉ tr·∫ª hi·ªÉu c√¢u ƒë·∫ßu ti√™n
      setTimeout(() => {
        speak("·ªí kh√¥ng! C√≥ ch√∫ ki·∫øn tinh ngh·ªãch ƒëang l·∫•y ƒëi 2 c√°i b√°nh!");
      }, 1500); // TƒÉng t·ª´ 1000ms l√™n 1500ms

      // TƒÉng th·ªùi gian tr∆∞·ªõc khi ki·∫øn di chuy·ªÉn (t·ª´ 3000ms l√™n 4500ms)
      setTimeout(() => {
        // Ki·∫øn di chuy·ªÉn ch·∫≠m h∆°n (t·ª´ 2500ms l√™n 3500ms)
        antX.value = withTiming(-300, { duration: 3500 }, (finished) => {
          if (finished) {
            runOnJS(setVisibleCakes)(4);
            runOnJS(setShowText3)(true);
            runOnJS(setShowResult)(true);
          }
        });

        // ƒê·ª£i l√¢u h∆°n tr∆∞·ªõc khi hi·ªÉn th·ªã c√¢u th·ª© ba v√† ph√©p t√≠nh
        setTimeout(() => {
          opacity3.value = withTiming(1, { duration: 1200 }); // TƒÉng t·ª´ 800ms l√™n 1200ms

          // ƒê·ªçc c√¢u th·ª© ba sau khi ki·∫øn ƒë√£ di chuy·ªÉn
          setTimeout(() => {
            speak("V·∫≠y l√† m√¨nh ch·ªâ c√≤n l·∫°i 4 c√°i b√°nh th√¥i");
          }, 1500); // TƒÉng t·ª´ 1000ms l√™n 1500ms

          // ƒê·ª£i l√¢u h∆°n tr∆∞·ªõc khi hi·ªÉn th·ªã ph√©p t√≠nh
          setTimeout(() => {
            opacityResult.value = withTiming(1, { duration: 1200 }); // TƒÉng t·ª´ 800ms l√™n 1200ms

            // ƒê·ªçc ph√©p t√≠nh sau khi hi·ªÉn th·ªã
            setTimeout(() => {
              speak("V·∫≠y ch√∫ng ta c√≥ ph√©p to√°n 6 tr·ª´ 2 b·∫±ng 4");
            }, 1500); // TƒÉng t·ª´ 1000ms l√™n 1500ms
          }, 3000); // TƒÉng t·ª´ 600ms l√™n 3000ms
        }, 4000); // TƒÉng t·ª´ 2000ms l√™n 4000ms
      }, 4500);
    }, 5000); // TƒÉng t·ª´ 3000ms l√™n 5000ms
  };

  // üß† useEffect kh·ªüi ƒë·ªông preload & animation
  useEffect(() => {
    let mounted = true;

    preloadImages().then(() => {
      if (mounted) {
        console.log("‚úÖ T·∫•t c·∫£ h√¨nh ·∫£nh ƒë√£ s·∫µn s√†ng!");
        startAnimationFlow();
      }
    });

    return () => {
      mounted = false;
      // D·ª´ng √¢m thanh khi unmount
      stopSpeech();
    };
  }, [screenKey]);

  // Hi·ªáu ·ª©ng nh·∫•n n√∫t
  const animateButton = (buttonAnim: RNAnimated.Value | RNAnimated.ValueXY) => {
    RNAnimated.sequence([
      RNAnimated.timing(buttonAnim, {
        toValue: 0.9,
        duration: 100,
        useNativeDriver: true,
      }),
      RNAnimated.timing(buttonAnim, {
        toValue: 1.1,
        duration: 100,
        useNativeDriver: true,
      }),
      RNAnimated.timing(buttonAnim, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start();
  };

  const handleReload = () => {
    animateButton(reloadButtonScale);

    // D·ª´ng √¢m thanh tr∆∞·ªõc khi reload
    stopSpeech();

    // Reset c√°c animation values
    owlSwayX.setValue(0);
    owlRotate.setValue(0);
    owlBounceY.setValue(0);
    owlScaleX.setValue(1);
    owlScaleY.setValue(1);

    // Fade out
    RNAnimated.parallel([
      RNAnimated.timing(contentOpacity, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
      RNAnimated.timing(characterAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start(() => {
      // Reset c√°c state
      setVisibleCakes(0);
      setShowText1(false);
      setShowText2(false);
      setShowText3(false);
      setShowResult(false);

      // Reset c√°c Reanimated values
      antX.value = width;
      opacity1.value = 0;
      opacity2.value = 0;
      opacity3.value = 0;
      opacityResult.value = 0;
      owlRotation.value = 0;

      setScreenKey((prev) => prev + 1);
    });
  };

  // L·∫•y c√¢u tho·∫°i hi·ªán t·∫°i d·ª±a v√†o tr·∫°ng th√°i
  const getCurrentMessage = () => {
    if (showText3) return "V·∫≠y l√† m√¨nh ch·ªâ c√≤n l·∫°i 4 c√°i b√°nh th√¥i";
    if (showText2)
      return "·ªí kh√¥ng! C√≥ ch√∫ ki·∫øn tinh ngh·ªãch ƒëang l·∫•y ƒëi 2 c√°i b√°nh!";
    if (showText1) return "M√¨nh c√≥ 6 chi·∫øc b√°nh ngon l√†nh";
    return "";
  };
  const handleNext = async () => {
    try {
      await stopSpeech();
    } catch (error) {
      console.warn("Error stopping speech:", error);
    }

    // Th·ª±c hi·ªán c√°c animation chuy·ªÉn ti·∫øp
    RNAnimated.parallel([
      RNAnimated.timing(contentOpacity, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
      RNAnimated.timing(characterAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start(() => {
      // ƒêi·ªÅu h∆∞·ªõng sang AddCountScene sau khi animation k·∫øt th√∫c
      router.push(
        `/(menu)/chapters/${chapterId}/lessons/${lessonId}/games/components/theory/ToanVo/Subtraction/SubtractCountScene`
      );
    });
  };
  return (
    <ImageBackground source={backgroundImg} style={styles.backgroundImage}>
      <StatusBar translucent backgroundColor="transparent" />
      <SafeAreaView style={styles.safeArea}>
        <View key={screenKey} style={styles.container}>
          {!imagesLoaded ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#FF69B4" />
              <Text style={styles.loadingText}>ƒêang t·∫£i t√†i nguy√™n...</Text>
            </View>
          ) : (
            <>
              {/* Ti√™u ƒë·ªÅ */}
              <RNAnimated.View
                style={[styles.titleContainer, { opacity: titleOpacity }]}
              >
                <LinearGradient
                  colors={["#FF9A8B", "#FF6B95"]}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 0 }}
                  style={styles.titleGradient}
                >
                  <Text style={styles.titleText}>H·ªçc Ph√©p Tr·ª´</Text>
                </LinearGradient>
              </RNAnimated.View>

              {/* Nh√¢n v·∫≠t v√† bong b√≥ng tho·∫°i */}
              <RNAnimated.View
                style={[
                  styles.characterContainer,
                  {
                    opacity: characterAnim,
                    transform: [
                      { scale: characterAnim },
                      {
                        translateY: characterAnim.interpolate({
                          inputRange: [0, 1],
                          outputRange: [30, 0],
                        }),
                      },
                    ],
                  },
                ]}
              >
                <View style={styles.speechBubbleContainer}>
                  <View style={styles.speechPointer} />
                  <Shadow
                    distance={5}
                    startColor="rgba(0,0,0,0.1)"
                    style={styles.speechBubble}
                  >
                    <Text style={styles.characterName}>B·∫°n C√∫</Text>
                    <Text style={styles.speech}>
                      {showText1 && "M√¨nh c√≥ 6 chi·∫øc b√°nh ngon l√†nh"}
                    </Text>
                    <Text style={styles.speech}>
                      {showText2 &&
                        "·ªí kh√¥ng! C√≥ ch√∫ ki·∫øn tinh ngh·ªãch ƒëang l·∫•y ƒëi 2 c√°i b√°nh!"}
                    </Text>
                    <Text style={styles.speech}>
                      {showText3 && "V·∫≠y l√† m√¨nh ch·ªâ c√≤n l·∫°i 4 c√°i b√°nh th√¥i"}
                    </Text>

                    {/* N√∫t ph√°t l·∫°i l·ªùi tho·∫°i */}
                    <TouchableOpacity
                      style={styles.speakAgainButton}
                      onPress={() => speak(getCurrentMessage())}
                      activeOpacity={0.8}
                    >
                      <FontAwesome5
                        name={isSpeechActive() ? "volume-up" : "volume-up"}
                        size={16}
                        color={isSpeechActive() ? "#FF6B95" : "#666"}
                        style={isSpeechActive() ? styles.speakingIcon : {}}
                      />
                    </TouchableOpacity>
                  </Shadow>
                </View>

                {/* Nh√¢n v·∫≠t v·ªõi hi·ªáu ·ª©ng l·∫Øc l∆∞ */}
                <TouchableOpacity
                  onPress={() => shakeOwl(getCurrentMessage())}
                  activeOpacity={0.8}
                >
                  <RNAnimated.View
                    style={{
                      transform: [
                        { translateX: owlSwayX },
                        { translateY: owlBounceY },
                        {
                          rotate: owlRotate.interpolate({
                            inputRange: [-1, 0, 1],
                            outputRange: ["-1rad", "0rad", "1rad"],
                          }),
                        },
                        { scaleX: owlScaleX },
                        { scaleY: owlScaleY },
                      ],
                    }}
                  >
                    <Image
                      source={showText3 ? OWL_CRY_IMAGE : OWL_TEACHER_IMAGE}
                      style={styles.characterImage}
                    />
                  </RNAnimated.View>
                </TouchableOpacity>
              </RNAnimated.View>

              {/* N·ªôi dung ch√≠nh */}
              <RNAnimated.View
                style={[
                  styles.equationCard,
                  {
                    opacity: contentOpacity,
                    transform: [{ scale: equationScale }],
                  },
                ]}
              >
                <Shadow
                  distance={5}
                  startColor="rgba(0,0,0,0.1)"
                  style={styles.equationCardInner}
                >
                  <View style={styles.equationContainer}>
                    {/* üêú Ki·∫øn ƒëi ngang */}
                    {showText2 && (
                      <AnimatedView style={antStyle}>
                        <Image source={ANT_IMAGE} style={styles.ant} />
                      </AnimatedView>
                    )}

                    {/* üç∞ B√°nh */}
                    <View style={styles.cakeContainer}>
                      {Array.from({ length: visibleCakes }).map((_, i) => (
                        <Image
                          key={i}
                          source={CAKE_IMAGE}
                          style={styles.cake}
                        />
                      ))}
                    </View>

                    {/* K·∫øt qu·∫£ ph√©p tr·ª´ */}
                    {showResult && (
                      <TouchableOpacity
                        style={styles.mathTextContainer}
                        onPress={() => speak("6 tr·ª´ 2 b·∫±ng 4")}
                      >
                        <AnimatedText style={[styles.mathText, resultStyle]}>
                          6 - 2 = 4
                        </AnimatedText>
                        <FontAwesome5
                          name="volume-up"
                          size={16}
                          color="#1976D2"
                          style={styles.equationSpeakIcon}
                        />
                      </TouchableOpacity>
                    )}
                  </View>
                </Shadow>
              </RNAnimated.View>

              {/* N√∫t ƒëi·ªÅu h∆∞·ªõng */}
              <View style={styles.bottomControls}>
                {/* N√∫t quay l·∫°i */}
                <RNAnimated.View
                  style={[
                    styles.buttonContainer,
                    { transform: [{ scale: backButtonScale }] },
                  ]}
                >
                  <TouchableOpacity
                    style={styles.circleButton}
                    onPress={async () => {
                      animateButton(backButtonScale);

                      // D·ª´ng √¢m thanh tr∆∞·ªõc khi chuy·ªÉn trang
                      await stopSpeech();

                      setTimeout(() => {
                        // Reset c√°c gi√° tr·ªã animation
                        owlSwayX.setValue(0);
                        owlRotate.setValue(0);
                        owlBounceY.setValue(0);
                        owlScaleX.setValue(1);
                        owlScaleY.setValue(1);

                        antX.value = width;
                        opacity1.value = 0;
                        opacity2.value = 0;
                        opacity3.value = 0;
                        opacityResult.value = 0;
                        owlRotation.value = 0;

                        // Reset c√°c gi√° tr·ªã tr·∫°ng th√°i
                        setVisibleCakes(0);
                        setShowText1(false);
                        setShowText2(false);
                        setShowText3(false);
                        setShowResult(false);

                        // ƒêi·ªÅu h∆∞·ªõng
                        if (router.canGoBack()) {
                          router.back(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
                        } else {
                          router.replace("../chapter2"); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh c·ª• th·ªÉ
                        }
                      }, 300); // ƒê·ª£i 300ms ƒë·ªÉ ƒë·∫£m b·∫£o Speech.stop() ho√†n th√†nh
                    }}
                    activeOpacity={0.8}
                  >
                    <LinearGradient
                      colors={["#FF5F6D", "#FFC371"]}
                      style={styles.gradientButton}
                    >
                      <FontAwesome5 name="arrow-left" size={20} color="white" />
                    </LinearGradient>
                  </TouchableOpacity>
                </RNAnimated.View>

                {/* N√∫t t·∫£i l·∫°i */}
                <RNAnimated.View
                  style={[
                    styles.buttonContainer,
                    { transform: [{ scale: reloadButtonScale }] },
                  ]}
                >
                  <TouchableOpacity
                    style={styles.mainButton}
                    onPress={handleReload}
                    activeOpacity={0.8}
                  >
                    <LinearGradient
                      colors={["#00F5A0", "#00D9F5"]}
                      style={styles.gradientMainButton}
                    >
                      <FontAwesome5
                        name="sync-alt"
                        size={18}
                        color="white"
                        style={styles.buttonIcon}
                      />
                    </LinearGradient>
                  </TouchableOpacity>
                </RNAnimated.View>

                {/* N√∫t ti·∫øp theo */}
                <RNAnimated.View
                  style={[
                    styles.buttonContainer,
                    { transform: [{ scale: nextButtonScale }] },
                  ]}
                >
                  <TouchableOpacity
                    style={styles.circleButton}
                    onPress={handleNext}
                    activeOpacity={0.8}
                  >
                    <LinearGradient
                      colors={["#B721FF", "#21D4FD"]}
                      style={styles.gradientButton}
                    >
                      <FontAwesome5
                        name="arrow-right"
                        size={20}
                        color="white"
                      />
                    </LinearGradient>
                  </TouchableOpacity>
                </RNAnimated.View>
              </View>
            </>
          )}
        </View>
      </SafeAreaView>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
  },
  safeArea: {
    flex: 1,
    paddingTop: StatusBar.currentHeight || 25,
  },
  container: {
    flex: 1,
    padding: 12,
    justifyContent: "space-between",
  },
  titleContainer: {
    alignItems: "center",
    marginBottom: 10,
  },
  titleGradient: {
    paddingVertical: 8,
    paddingHorizontal: 25,
    borderRadius: 20,
  },
  titleText: {
    fontSize: 24,
    fontWeight: "bold",
    color: "white",
    textShadowColor: "rgba(0,0,0,0.2)",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  characterContainer: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 5,
    marginVertical: 5,
  },
  characterImage: {
    width: 100,
    height: 100,
  },
  speechBubbleContainer: {
    flex: 1,
    position: "relative",
  },
  speechBubble: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 10,
    width: "110%",
    height: 140,
    justifyContent: "center",
    textAlign: "center",
    alignContent: "center",
  },
  speechPointer: {
    position: "absolute",
    right: -5,
    top: "40%",
    width: 15,
    height: 15,
    backgroundColor: "white",
    transform: [{ rotate: "45deg" }],
    zIndex: -1,
  },
  characterName: {
    color: "orange",
    fontSize: 20,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 5,
  },
  speech: {
    fontSize: 14,
    color: "#333",
    lineHeight: 20,
    textAlign: "auto",
  },
  speakAgainButton: {
    position: "absolute",
    bottom: 10,
    right: 10,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: "rgba(240,240,240,0.8)",
    alignItems: "center",
    justifyContent: "center",
  },
  speakingIcon: {
    color: "#FF6B95",
  },
  equationCard: {
    flex: 1,
    marginVertical: 10,
    maxHeight: height * 0.4,
  },
  equationCardInner: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 12,
    width: "100%",
    height: "100%",
    justifyContent: "center",
  },
  equationContainer: {
    backgroundColor: "rgba(255, 248, 225, 0.5)",
    borderRadius: 12,
    padding: 10,
    flex: 1,
    justifyContent: "center",
    position: "relative",
  },
  cakeContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    gap: 10,
    alignItems: "center",
    marginVertical: 10,
  },
  cake: {
    width: 50,
    height: 50,
    margin: 3,
  },
  ant: {
    width: 40,
    height: 40,
    zIndex: 10,
  },
  mathTextContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginTop: 10,
    marginBottom: 0,
    backgroundColor: "#EEEEEE",
    paddingVertical: 6,
    paddingHorizontal: 16,
    borderRadius: 12,
    alignSelf: "center",
  },
  mathText: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#1976D2",
    marginRight: 5,
  },
  equationSpeakIcon: {
    marginLeft: 5,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  loadingText: {
    fontSize: 18,
    color: "#4E342E",
    marginTop: 20,
  },
  // N√∫t ƒëi·ªÅu h∆∞·ªõng
  bottomControls: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: 10,
    marginBottom: 10,
    paddingHorizontal: 5,
  },
  buttonContainer: {
    flex: 1,
    alignItems: "center",
    marginHorizontal: 5,
    textAlign: "center",
  },
  circleButton: {
    alignItems: "center",
    justifyContent: "center",
  },
  gradientButton: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: "center",
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  mainButton: {
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  gradientMainButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 20,
  },
  buttonIcon: {
    marginRight: 0,
  },
});
